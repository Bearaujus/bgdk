// Code generated by MockGen. DO NOT EDIT.
// Source: util/json/init.go

// Package mockUtilJSON is a generated GoMock package.
package mockUtilJSON

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtilJSON is a mock of UtilJSON interface.
type MockUtilJSON struct {
	ctrl     *gomock.Controller
	recorder *MockUtilJSONMockRecorder
}

// MockUtilJSONMockRecorder is the mock recorder for MockUtilJSON.
type MockUtilJSONMockRecorder struct {
	mock *MockUtilJSON
}

// NewMockUtilJSON creates a new mock instance.
func NewMockUtilJSON(ctrl *gomock.Controller) *MockUtilJSON {
	mock := &MockUtilJSON{ctrl: ctrl}
	mock.recorder = &MockUtilJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilJSON) EXPECT() *MockUtilJSONMockRecorder {
	return m.recorder
}

// JSONMarshal mocks base method.
func (m *MockUtilJSON) JSONMarshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONMarshal indicates an expected call of JSONMarshal.
func (mr *MockUtilJSONMockRecorder) JSONMarshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshal", reflect.TypeOf((*MockUtilJSON)(nil).JSONMarshal), v)
}

// JSONMarshalIndent mocks base method.
func (m *MockUtilJSON) JSONMarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshalIndent", v, prefix, indent)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONMarshalIndent indicates an expected call of JSONMarshalIndent.
func (mr *MockUtilJSONMockRecorder) JSONMarshalIndent(v, prefix, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshalIndent", reflect.TypeOf((*MockUtilJSON)(nil).JSONMarshalIndent), v, prefix, indent)
}

// JSONMarshalIndentWrite mocks base method.
func (m *MockUtilJSON) JSONMarshalIndentWrite(destPath string, v interface{}, prefix, indent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshalIndentWrite", destPath, v, prefix, indent)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONMarshalIndentWrite indicates an expected call of JSONMarshalIndentWrite.
func (mr *MockUtilJSONMockRecorder) JSONMarshalIndentWrite(destPath, v, prefix, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshalIndentWrite", reflect.TypeOf((*MockUtilJSON)(nil).JSONMarshalIndentWrite), destPath, v, prefix, indent)
}

// JSONMarshalWrite mocks base method.
func (m *MockUtilJSON) JSONMarshalWrite(destPath string, v interface{}, pretty bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshalWrite", destPath, v, pretty)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONMarshalWrite indicates an expected call of JSONMarshalWrite.
func (mr *MockUtilJSONMockRecorder) JSONMarshalWrite(destPath, v, pretty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshalWrite", reflect.TypeOf((*MockUtilJSON)(nil).JSONMarshalWrite), destPath, v, pretty)
}

// JSONUnmarshal mocks base method.
func (m *MockUtilJSON) JSONUnmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONUnmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONUnmarshal indicates an expected call of JSONUnmarshal.
func (mr *MockUtilJSONMockRecorder) JSONUnmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONUnmarshal", reflect.TypeOf((*MockUtilJSON)(nil).JSONUnmarshal), data, v)
}

// JSONUnmarshalRead mocks base method.
func (m *MockUtilJSON) JSONUnmarshalRead(srcPath string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONUnmarshalRead", srcPath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONUnmarshalRead indicates an expected call of JSONUnmarshalRead.
func (mr *MockUtilJSONMockRecorder) JSONUnmarshalRead(srcPath, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONUnmarshalRead", reflect.TypeOf((*MockUtilJSON)(nil).JSONUnmarshalRead), srcPath, v)
}
