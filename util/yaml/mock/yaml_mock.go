// Code generated by MockGen. DO NOT EDIT.
// Source: util/yaml/init.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockYAML is a mock of YAML interface.
type MockYAML struct {
	ctrl     *gomock.Controller
	recorder *MockYAMLMockRecorder
}

// MockYAMLMockRecorder is the mock recorder for MockYAML.
type MockYAMLMockRecorder struct {
	mock *MockYAML
}

// NewMockYAML creates a new mock instance.
func NewMockYAML(ctrl *gomock.Controller) *MockYAML {
	mock := &MockYAML{ctrl: ctrl}
	mock.recorder = &MockYAMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYAML) EXPECT() *MockYAMLMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockYAML) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockYAMLMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockYAML)(nil).Marshal), v)
}

// MarshalWrite mocks base method.
func (m *MockYAML) MarshalWrite(destPath string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalWrite", destPath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarshalWrite indicates an expected call of MarshalWrite.
func (mr *MockYAMLMockRecorder) MarshalWrite(destPath, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalWrite", reflect.TypeOf((*MockYAML)(nil).MarshalWrite), destPath, v)
}

// Unmarshal mocks base method.
func (m *MockYAML) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockYAMLMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockYAML)(nil).Unmarshal), data, v)
}

// UnmarshalRead mocks base method.
func (m *MockYAML) UnmarshalRead(srcPath string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalRead", srcPath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalRead indicates an expected call of UnmarshalRead.
func (mr *MockYAMLMockRecorder) UnmarshalRead(srcPath, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalRead", reflect.TypeOf((*MockYAML)(nil).UnmarshalRead), srcPath, v)
}
