// Code generated by MockGen. DO NOT EDIT.
// Source: util/yaml/init.go

// Package mockUtilYAML is a generated GoMock package.
package mockUtilYAML

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtilYAML is a mock of UtilYAML interface.
type MockUtilYAML struct {
	ctrl     *gomock.Controller
	recorder *MockUtilYAMLMockRecorder
}

// MockUtilYAMLMockRecorder is the mock recorder for MockUtilYAML.
type MockUtilYAMLMockRecorder struct {
	mock *MockUtilYAML
}

// NewMockUtilYAML creates a new mock instance.
func NewMockUtilYAML(ctrl *gomock.Controller) *MockUtilYAML {
	mock := &MockUtilYAML{ctrl: ctrl}
	mock.recorder = &MockUtilYAMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilYAML) EXPECT() *MockUtilYAMLMockRecorder {
	return m.recorder
}

// YAMLMarshal mocks base method.
func (m *MockUtilYAML) YAMLMarshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAMLMarshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// YAMLMarshal indicates an expected call of YAMLMarshal.
func (mr *MockUtilYAMLMockRecorder) YAMLMarshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAMLMarshal", reflect.TypeOf((*MockUtilYAML)(nil).YAMLMarshal), v)
}

// YAMLMarshalWrite mocks base method.
func (m *MockUtilYAML) YAMLMarshalWrite(destPath string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAMLMarshalWrite", destPath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// YAMLMarshalWrite indicates an expected call of YAMLMarshalWrite.
func (mr *MockUtilYAMLMockRecorder) YAMLMarshalWrite(destPath, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAMLMarshalWrite", reflect.TypeOf((*MockUtilYAML)(nil).YAMLMarshalWrite), destPath, v)
}

// YAMLUnmarshal mocks base method.
func (m *MockUtilYAML) YAMLUnmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAMLUnmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// YAMLUnmarshal indicates an expected call of YAMLUnmarshal.
func (mr *MockUtilYAMLMockRecorder) YAMLUnmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAMLUnmarshal", reflect.TypeOf((*MockUtilYAML)(nil).YAMLUnmarshal), data, v)
}

// YAMLUnmarshalRead mocks base method.
func (m *MockUtilYAML) YAMLUnmarshalRead(srcPath string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAMLUnmarshalRead", srcPath, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// YAMLUnmarshalRead indicates an expected call of YAMLUnmarshalRead.
func (mr *MockUtilYAMLMockRecorder) YAMLUnmarshalRead(srcPath, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAMLUnmarshalRead", reflect.TypeOf((*MockUtilYAML)(nil).YAMLUnmarshalRead), srcPath, v)
}
